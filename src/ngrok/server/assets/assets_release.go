// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\x3d\xd7\xba\x38\x10\xc5\x7b\x3e\xc5\xf6\x9c\x3d\xf0\x28\x2a\x94\x81\x44\x0d\x98\xf0\x0e\x42\x87\xbc\x49\x14\x15\x11\x02\x7c\xfa\xf5\xff\x14\x5b\xec\x4e\x35\xf3\x9b\x62\xe6\x9e\x7b\xee\xdf\x7f\x4a\x47\x07\x4c\xff\x32\x90\x17\xe0\x3d\x36\x40\x80\x7e\xa9\x40\x30\x36\x9e\xcc\x30\x40\xf2\x34\x0c\xd7\xd8\xd8\x28\x79\x48\xd2\x2b\x33\x21\xa0\x7a\x7d\xeb\xae\xb7\xe6\xa0\x71\x59\x07\x6e\xb8\x07\x10\x04\xc4\x43\x1c\xf2\x04\x46\xae\x0b\x21\xb8\x3e\x85\xcb\x9a\xca\xa7\xd6\x5b\x72\x08\xca\x3d\x97\x27\xba\x80\x85\xc0\x9c\xdb\x10\x71\xb2\x44\xd9\x97\x7d\x67\x34\x91\xc0\xfd\x97\x11\x9d\x4c\x28\x00\x8e\x5e\xd3\x48\xd0\x01\x21\xc6\xe1\x3a\xe6\x6b\x77\x48\x8f\x94\x7f\x3f\xd2\x31\xfb\xef\x75\xb4\x07\xc0\x36\x80\xab\x82\x3f\x7b\xa3\xb6\xbe\x3d\x02\x0b\xe8\x57\x42\xa0\x46\x6a\x66\xd4\xbe\xd9\xbf\xca\xdb\xe1\x0e\x87\x75\x2b\xae\x71\x59\x5f\x86\x5c\x2a\x45\x7e\x0c\x57\x63\xa5\x64\xc1\x1b\x5b\x22\x7b\x24\xc3\xee\x1e\xfe\xc4\xa4\x79\xde\xd4\xfd\x99\xce\x8d\x75\x17\x44\xf3\xbc\x0c\x36\x8b\x8a\xa3\xee\xa4\x75\x56\xc0\x8d\xbe\xad\x56\xe8\x12\x67\x72\xe2\x99\xc9\x27\x59\xbc\x68\x65\x43\x36\x4f\x3f\x1f\xb4\x31\x4e\xec\x87\xdb\x56\xd2\xc6\x1a\xa6\x3f\x36\x5f\xc9\x42\xc4\x40\xa2\x7b\x69\x3b\x43\xab\x77\x79\x96\xa2\xb2\xb2\x2b\x1d\xd0\x5d\x1c\x17\xe1\xee\xe3\xbd\x33\x74\xeb\x37\xa4\x69\x06\x64\xb2\xe5\x1e\x13\x47\x24\x2f\x94\xce\x8e\x58\x96\xaa\x9a\xd7\xc2\xf1\x90\xfa\x67\xa4\x1c\xe9\x8b\xf2\x37\x67\x86\xce\xe8\xc5\xf2\xbb\xf9\x5a\xce\xe6\x93\x5c\xe7\x8b\x57\xac\xc1\x7b\x75\xb6\x0e\xab\x29\xf6\x79\x90\x8d\x94\xf5\x44\x2e\x94\x65\xda\xe5\xb1\xf9\x75\x41\x4c\xb2\xce\xd8\x7c\x45\x37\xcb\xdd\xdc\xaa\xfd\x8f\x78\xe9\x8b\x61\xde\x98\xb2\xaa\xb4\xa7\xf7\x63\x97\xee\x28\xcf\x34\xbb\x77\xde\xdd\x98\x2a\x27\x22\xde\x25\x31\xa8\xa6\xc8\xa8\xf5\x36\x2f\x04\x37\x22\xf1\x4b\x8b\xf1\x63\x9c\x94\xa3\xb4\x77\x4c\x17\x43\xe0\x02\x9d\x00\xf9\x60\xf8\xdd\xc1\xc7\x97\x35\x74\x91\xae\xbb\x21\x00\x0a\xfe\x3a\x02\x1a\x77\xd1\xf9\x0a\x7f\xa8\xe3\x07\x83\x90\x74\x5c\x02\xea\x09\x8d\xb8\x34\x2d\x26\xf5\x41\x5f\x89\xfe\x83\x16\x41\x90\x52\x2e\x69\x8a\xfd\x1c\x97\xe8\x65\x74\xfd\x07\x0f\xfe\x96\x35\x9a\x73\x4a\xa0\xdf\x36\xe3\x23\x38\x2f\xdc\x9d\x84\xee\x8d\xe5\x32\x5c\xb3\xed\xb4\xa6\x6a\x78\x2b\x37\x31\x54\x5e\xd9\x30\x18\x8a\x5c\x3c\xb0\x9d\xc9\xd6\xc2\x94\x60\x6b\x87\x49\x45\x86\xd9\xf5\x9d\x1d\xa9\xc9\x7d\x79\xb0\xf1\x28\x17\x6d\xe4\x08\x7d\x70\xb3\xd9\x3e\x7c\x15\x2c\x8a\x3b\xd8\xdb\x0f\xe5\xa3\x05\xf7\xf6\x39\x16\x97\xe4\x7a\x48\xf1\xb3\x3c\x9d\x56\x50\x82\x92\x6f\xb7\xf5\xe9\x3c\x57\xbd\xe6\xd2\xf7\x26\x99\x93\xf3\x62\xa6\xe4\x2d\x54\xed\xa4\x6e\xbb\x08\x94\xf7\x40\x4c\x77\xf6\x80\xb5\x84\xfb\x8d\x6f\xa4\x0d\x6a\x6e\x5c\xd3\x8e\x8f\xea\xe3\xbd\x02\xec\x0e\x07\x36\xc6\x5b\xa5\x7c\x5d\x8b\xe4\x79\x0d\xee\x26\x88\x2d\x43\x0a\x05\x39\xa7\x79\xbf\x91\x45\x59\x74\x56\x52\xbd\xbf\x3e\x6b\xd9\x6a\xc7\x26\x83\x53\x85\xc6\xfe\x96\x93\x52\x4a\x78\xef\x7b\xf9\x0e\xc3\x6c\xc7\x06\xc5\x22\xdd\x7e\x12\x9d\xc8\x09\x81\x3c\x2f\x4c\x70\x37\x1e\xd3\xe3\x8e\x09\xbf\xe1\x44\x14\xfe\x3f\xb0\xff\x04\x00\x00\xff\xff\x2e\x86\x6d\xa6\xcd\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 973, mode: os.FileMode(436), modTime: time.Unix(1488874235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xc7\x0e\xab\x5a\x12\x45\xe7\x7c\xc5\x9b\xa3\x16\x06\x03\xc6\xc3\x03\x1c\x93\x73\x66\x46\x0e\x26\x63\xe2\xd7\xf7\x7d\xb7\xa7\x5d\xd3\x92\xaa\x76\x2d\x95\xb4\xfe\xf3\x6f\xb1\x50\x90\xf4\x7f\x6c\x07\xfc\x63\xda\x92\x0f\x5c\xf8\x8f\x02\xa3\xbf\x1d\x44\x93\x24\x38\x1e\x12\x0b\x80\xc2\x01\x0b\x82\x1b\xac\x84\xcb\xf8\x4c\xc2\x55\x8e\xbc\x4e\xc5\x57\xe8\xf8\xed\xd9\xa3\x4f\xa9\xa8\xd2\x2d\xc3\x0a\xf4\x10\x3d\x62\x2f\xc9\xc4\x5d\x24\x05\x6d\x91\x21\xda\x5e\x9d\x87\x07\x5a\x33\x7e\x99\x4f\xa8\x5f\x8d\xd2\xa1\x72\x78\x6f\x46\xeb\xe7\x22\x6b\xc6\x55\x92\xf3\x14\x4b\x97\x04\x4c\x83\xe4\x11\xd9\x72\xf4\x8b\x6e\xdb\x27\x0c\xbe\xbd\x4e\xfc\x87\x40\x8a\x53\x5b\xfc\x30\x94\xa8\x0f\xde\x92\x8e\x1b\x07\xf1\xf0\x5b\x10\xb1\x76\xdc\x5f\xbc\xb2\x5a\x47\x12\xc3\xa2\x34\x4a\x16\xe8\xaf\x20\xc8\xbd\xd7\xcf\x5e\x12\xf8\x5d\x29\xad\x69\x36\x28\x23\xed\xdd\x05\x9a\x89\x6a\x13\x8c\x2f\x13\x2d\x0a\x86\xc9\x2a\x51\x88\x9d\x10\x92\xa2\x3e\xe9\xc7\x72\xb4\x1c\xdb\xea\xa9\xe2\xcc\x57\x5d\x5c\xf2\xa8\xd5\x57\x6a\xe7\x4f\xb0\x10\xa1\x22\x10\x27\x12\x38\x87\x9b\xec\x7a\xbb\x6a\x8f\x9c\xbc\xcf\x57\x16\xc8\x63\x8a\x46\xc9\xcc\x51\x7f\x8e\x6e\xee\x4e\xa6\x99\x15\x47\xd3\x35\xdf\x2e\x4a\x7e\x30\x64\xaf\x2e\xc3\x2b\x7e\xe9\x47\xf2\x36\x56\x73\x41\xe6\x3d\x26\x55\x0d\xed\x30\xd4\x2d\x4f\x9f\xab\xd8\x3e\xcb\x2d\x5f\x0b\xa6\x77\x20\x0d\xfb\x49\x8a\xd8\xc7\x94\x2d\x89\x07\x16\x60\xc1\xf8\x2f\x6c\xe7\x94\x3c\x34\xb0\x31\xcf\x56\x7f\xc2\x82\xd4\x14\xf3\x2d\x25\x8f\x11\x44\xf9\xde\x31\x61\xa5\xe3\xa7\x46\x2a\x12\x96\x65\xf9\xab\xee\x9a\x14\xfa\x5e\x28\x88\xe3\x90\xb2\xcb\x5b\x3b\x47\x6c\xf9\xcd\x28\x7f\xb7\x4f\x29\x53\xc2\x03\xb4\x1a\x92\x7c\xd2\xb7\x55\x7e\xac\xa5\x65\x7f\x33\x1f\x47\x0b\xf5\x58\xa5\x0d\x6a\x22\xf8\x62\xf3\x84\x2b\xd0\x60\x64\x53\x3f\x2d\x7e\xca\xcd\x57\x62\xdc\x7b\x93\x67\x45\x07\x72\xde\x62\x23\x66\x8c\x62\x04\xe3\x25\x27\xcc\x1c\x62\xfc\x3d\xeb\x5c\xe1\xc4\xa7\xe2\x8b\x56\x3f\x1b\xab\x75\x66\x2c\xff\x06\x4e\xfe\x99\x8f\xc9\x16\x28\x43\x09\x69\xad\xa2\xa7\x92\x7e\xd5\x5a\x7d\x08\x3c\xdb\x9d\x3e\x8c\x90\x35\xd6\x2f\x33\x5c\xdf\x50\x52\xcb\x47\xca\x62\xf3\x22\x87\x33\xef\x5d\xb3\x90\xb5\x59\x6e\xdb\x7e\x1b\xc4\x62\xfd\xfc\x3e\xfb\x69\xee\xb9\x8a\xce\x24\xdd\xd3\x39\x93\xce\xcf\x01\x37\xd2\x21\x45\x5c\x99\x18\x4c\x68\x1e\x82\xe4\x65\x4b\xe6\xe8\x2c\x0a\xd0\x5a\xba\xbc\x2f\xfb\xc8\x7e\xdb\x80\x17\x9b\x02\xf0\xa6\x6d\x9b\xcc\xff\xb3\x42\x8d\x9d\xfc\xa8\x41\xec\x2e\x07\x70\x6e\x7c\x05\x3e\x72\x71\xee\x26\x6a\x90\xab\x22\x08\xde\xca\x36\xc9\x69\x4d\x65\xec\x26\xcb\x7d\xb1\x96\x9c\x63\xb7\x7d\xb2\xfd\xc4\xf0\xe1\x6a\xe5\xdb\x9c\xa9\x17\x08\x03\x33\xa0\x5d\x77\xb4\x20\xdd\xf5\x76\x85\x6c\x33\x0d\x2f\xc5\xd2\xaa\x52\xd5\x56\xd3\x25\xf6\x39\x22\x54\x79\xe8\xaf\x6c\x72\x8c\xa9\xb2\x88\xfc\x22\x9e\x4d\xaf\x68\xb4\xe3\x35\xc3\xc4\x82\xb9\xa7\xdc\xda\xd6\xfa\x04\x84\x7a\x70\x6f\x08\x7a\x75\xea\xa5\xfe\xbe\x24\x06\xbd\xe4\x71\xbf\xe5\xee\xf8\xf3\xb6\x52\x09\xde\x28\x0c\x8a\x5c\x7d\x34\x8a\x33\x0e\xbb\x22\xbd\xaf\xe9\xe3\x24\xcc\x57\xf0\x6a\xea\xfd\xbf\xc4\x78\xf8\xc4\x91\x51\xa6\x56\xef\xdb\x4b\xad\x00\x5a\x3c\xa3\xfb\x48\x64\xb0\xef\x16\x62\xc7\xc4\xb3\x4e\x6e\x09\x58\x7b\xe8\xbf\xef\x5b\x70\x0a\x48\x10\x25\x03\xdc\xa3\x48\x37\xec\x92\x3b\x2d\xe7\x2e\xe5\xb5\xff\x81\xa8\x6a\x15\x1f\x3e\x5e\xb4\x5e\xdd\xea\x0a\x05\x1e\xae\x7c\xcd\xcf\x49\x4a\x63\x9f\x38\x1a\x6d\x6a\x76\x74\xe7\x3a\x20\x24\x6e\xf0\x0c\xd8\x25\x60\xe3\x94\xcd\x79\x4e\x91\x5b\x51\x71\x7d\x24\x01\x77\x19\x19\x6a\xe2\x12\xc4\xaf\x7f\x58\xa8\x50\x1c\x3f\x0d\x93\x5d\x1b\x67\x6b\xce\x6c\x01\x2a\x3c\x9a\xe0\xf4\xfe\x46\xa6\x07\xd3\x83\xcd\x87\xdf\xcd\xbe\x23\xf7\xdc\xaf\x02\x56\x46\x82\xe1\x37\xdf\x85\x4c\x9d\x78\x9f\x55\xa3\x65\x6e\x6b\xc4\x28\x9e\x47\x9e\x25\xfa\xcc\xa5\x20\x4d\x1e\xe5\xe1\xc7\x7a\x3e\x1b\xb5\xf5\xb4\xf8\x72\x55\x79\x5c\x50\xaa\xda\x3d\xcf\xea\x26\x3c\x09\xb1\xd4\xc3\x34\x5f\xe6\xd6\xcc\x64\x42\xeb\x79\xde\x89\xe8\x46\x96\xea\xf9\x03\x0e\x34\x74\x82\x22\x71\xad\x14\xe8\x85\xc8\x96\x84\x55\x26\xa8\x1e\x4c\xec\x10\xfb\x87\x8b\x2f\x83\x0c\x69\xd2\x43\x94\xb4\x09\x93\x65\xf7\x62\xba\x7d\x89\x76\x6f\xe7\xe4\x9f\xd1\xd6\xbf\x94\x41\xf3\x1b\xea\xf8\x0c\x9a\xb0\x90\xf1\x54\xcf\x92\xfc\x69\xef\x87\xaf\xb1\x75\xf5\xb5\xee\x7d\x0a\x76\x8e\x98\x43\x64\x46\x0f\x83\x90\x5d\x5c\xfd\x76\x19\xad\xf6\x50\x62\x1b\x27\xf8\x10\x42\x86\x63\x52\x95\x7c\x07\xa5\xcd\x03\x29\xc0\x1c\xf6\xa4\x03\x05\x97\x4b\x51\x46\x7f\x4a\xae\xde\xc3\x02\x6e\xad\xcb\x12\xc4\x0d\x0a\xb2\x4c\xb6\x06\xdd\xdf\x20\x53\x97\xcf\xa7\xf2\x1f\x6a\x6e\x45\xd9\xe3\x35\x1b\x81\x4a\xcd\x2c\x39\x83\xa5\x61\xb2\xb0\x1d\xa9\x0a\xbd\x28\xdc\xbc\xcc\xce\xd1\x24\x34\x68\x55\x86\x39\x90\x2e\x22\xab\xca\x52\xd8\x8a\x8f\xab\x60\x5d\xcc\xfb\x45\x61\x53\x83\x7f\xc6\x52\xc3\x0e\x35\x13\x13\xca\xfb\x94\xf9\x7a\x9c\xcf\x6b\xbf\x62\xfe\xd4\xe1\xa7\xde\x8d\x34\x49\xec\xb9\x80\x4c\x42\x20\xe3\x5a\xb2\xcc\xc2\xab\x0f\x96\x35\xc0\xd5\xa6\xdd\xa5\x55\x91\x53\x6e\xdf\x79\x79\x97\xc7\x1e\x7d\xbc\xa3\x74\x2b\x25\x1b\x38\xd1\xdb\xa6\xcb\x7a\x63\xd1\x35\x25\x63\xff\xb0\x2f\x85\x9e\x8b\x0b\xc9\xe2\x52\xe8\x06\x3d\xfd\x9a\x9e\x1b\x0d\x2c\x2a\xa4\xaf\xa6\xa8\xf4\x9e\xa2\x0b\x6e\x57\xb1\xf5\xd9\xed\x92\xb0\x53\x21\x8d\x8b\x9c\xdb\x63\x52\xaf\x32\x16\xf2\x57\x29\x50\xe7\xff\xbf\x6a\xfe\x1b\x00\x00\xff\xff\xaa\xcd\x8e\xbe\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(436), modTime: time.Unix(1488874235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

