// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x53\xc9\xae\xab\x48\x0c\xdd\xf3\x15\xbd\x8f\x5a\xcc\xdc\xb0\x78\x8b\x2a\xaa\x18\x12\x8a\x04\x12\x20\x64\xc7\x3c\xdc\x90\x62\xb8\xa4\x20\x5f\xdf\x79\x4f\xea\xd5\xb3\x64\xc9\x3a\xb2\x8e\x2d\xfb\x9c\x7f\x7f\x07\xc4\x96\xe3\xfd\x63\xe0\xe0\xea\x98\x8e\x01\xae\xf8\x0f\xca\x11\xc7\x31\xe6\xce\x30\xc0\x9d\x1a\x86\x8f\xe4\x3e\xea\xa2\xed\xf8\x08\xe9\x1b\x78\xb0\xfe\x1e\x9b\xef\xd6\xd2\x99\x00\x81\x3f\x9b\x00\x81\x8c\x04\xdf\xcc\x64\x09\x8a\x7c\x1f\x21\x08\x05\xae\x88\xd5\xe5\x1e\xb3\x25\xb7\x03\x39\x93\xc1\x52\xda\x0f\x8d\x40\xe5\x86\xae\x58\x26\x88\x30\x0f\x61\x81\x5c\xc9\xe6\x99\xf4\x83\x11\x46\xae\x78\xfd\xe4\xff\x18\xe3\xac\x37\xbe\x13\x98\x5b\x40\x0c\x31\x60\xcc\x2f\xec\x68\xc9\xfa\x68\x76\x9f\x50\x28\x24\x9d\xb9\xcf\x46\x2d\x7f\x6f\x78\x71\x18\xf2\x93\xc3\x91\xde\x9d\xe6\x95\x7b\xc0\xc7\x10\xfa\x00\x71\x75\x8d\xcf\x00\x7d\x1a\x7c\x6a\x7c\x6a\x08\x08\xae\x59\xb0\xdf\x7b\x4e\x9b\x55\x91\x19\x8a\xd8\xbd\x5d\x5a\x7f\x5c\x85\x6c\x1b\xd6\xd5\x48\x68\x12\xad\x72\x68\xd6\xeb\xce\xe7\x67\x7f\xe4\xd2\x99\x19\xfb\xfa\xa1\xed\xb3\x9e\xef\x02\x82\xc1\x83\x3c\xab\x59\x55\x32\xf9\xf6\xec\x05\x42\xf8\x40\xde\xf5\x89\x1e\xcb\x58\x5c\x12\x96\xcb\xb3\x7c\x38\xc8\x8a\x95\x7e\x4d\xc9\x89\x86\xcb\xcc\xe5\xce\x90\x2b\xab\x7a\x4a\xc6\xf3\xd4\xdb\xbc\x0b\x7a\xde\xb7\xee\x84\x54\xb7\x29\x59\x62\x3e\x3c\xa3\xa5\xbc\xce\xee\x69\xfa\x96\x82\x26\x0a\xfc\xcd\x8a\x7a\x2c\xc1\xce\x62\x5a\x75\x50\xc4\x9c\xab\xee\xaf\xb2\xbd\x28\xfb\x71\xd0\xa1\x24\x26\x28\xcc\xdf\x3e\x72\xbb\xf1\x2b\x75\xb5\x2f\xfa\x5d\xd5\x9f\x01\xa8\xd0\x7b\xf4\x94\x9e\x29\xd9\xbd\xfb\x53\x9e\x74\xeb\xb0\xdd\x2c\xef\xab\xc5\x1d\xe5\xce\xb5\x59\x3d\x54\x61\xf7\x92\xd5\x26\x8c\xe2\x30\x2f\xe7\xb2\x0c\x86\x78\xaf\xf1\x3f\x6d\x11\x49\x30\xdf\x12\x22\x5d\x44\xd8\x88\xf9\xb4\x2f\xea\xc7\x34\xa4\x0a\x4b\xae\xc1\x33\x23\xd4\xf8\x1c\xb1\x7a\x20\x64\xa9\x26\x59\xce\x4d\x63\x94\xd6\xed\x55\x8a\xa0\x95\xcc\x28\x39\x5c\x62\xe4\xf6\xa0\xc8\xba\x54\x4c\x88\x01\x18\x06\xe0\xfa\xb7\x36\x38\x00\x4e\x9f\x0f\x60\x80\x75\x67\x3f\x1e\xfb\xe9\xeb\xf8\xa3\x1d\x0a\x73\xac\x02\x1f\x2f\xbe\xf3\x5e\x55\xec\xf1\xaf\xc5\xa3\xa8\x0a\x2e\x42\xb3\xda\xa1\xcd\x5b\x3b\x4d\x6f\xa3\xc5\x8e\xe0\x59\xe1\x1c\x4b\xd9\xd3\x4b\xda\xa1\xb4\x2f\xde\xc7\x51\x0b\x2e\xae\x93\xcd\xe3\x33\x93\xce\x6d\xa0\xac\xa5\x3e\xdc\x60\x7d\xf5\xd5\xa8\x88\x7c\xd5\xb1\x35\xa0\x6e\x03\xd5\x6f\xc1\x66\x50\x24\xf8\xe6\x9e\x7b\x15\xaa\xb4\x0b\xab\x10\x41\x27\x34\xd4\xe1\xec\xb4\x6e\xb1\x1e\x6b\xfa\x43\x17\x1c\x6b\xd0\x3e\xb0\xc4\x7e\x19\x12\x61\xc9\x8b\x69\x0b\x9a\x68\xba\x89\xa2\x40\x54\xc1\xf1\x44\xfd\xf4\x21\x20\xc8\xbb\x1e\x05\x4c\x10\xab\x1d\x50\x9a\xed\x8d\xde\xba\x4c\x17\x4e\x7c\xdd\x28\x8b\xc9\x60\x3a\xdf\xe3\xe8\x23\x50\x63\xb4\x79\x8f\x0e\x17\x3d\xe4\xd3\x7a\x8a\xc6\x59\xcb\x4a\x6f\x48\x21\x57\xfd\xb8\x07\x80\xa1\xb2\xef\x7f\x88\x65\xc9\x94\x2e\x27\x9e\x6e\x3a\x0f\x84\xe8\xfd\x21\xf2\xd2\x63\x39\x91\x8a\x9f\x1a\x0c\x56\xf4\xfe\xd1\x0f\x53\xa6\xbd\xf8\x40\xd7\x19\x89\xa5\xe5\x1d\x73\x8f\x7e\x40\x75\x9d\x89\x9d\x1b\xa1\x43\xb9\x09\x11\x1f\x94\xe9\x61\xd7\x84\xf6\x0b\x2d\xec\xd7\x2f\xee\x8f\x69\xb1\x87\xfe\x36\xf2\x7f\x01\x00\x00\xff\xff\x92\x93\x87\x75\xe5\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 997, mode: os.FileMode(436), modTime: time.Unix(1488636804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\x37\x12\xa3\x60\x16\x06\x73\x4e\x31\x39\xb5\x85\x47\x10\x62\x7e\x3c\x48\x78\x93\xe1\xad\x70\xc2\x9f\x7e\x67\x27\xde\x97\xbe\xa4\xab\x83\xaf\xff\xf3\xbf\xe3\x81\xac\x5a\x7f\x1c\x97\xfb\xf3\x71\xd4\x80\xf3\xc0\x1f\x1d\xc4\xff\x3e\x90\xa9\xaa\x60\x3a\x55\x9e\xe3\x74\x81\xb3\x01\x77\xba\x22\xaf\x3c\x27\xda\x6a\x1b\xeb\x07\x9e\x6f\x6f\x85\xae\x09\xab\xe2\x1c\xfa\xa8\x00\xad\x6d\x9a\x48\x29\xec\x50\x54\x28\x11\xbe\x84\x79\x81\x1e\xce\xb8\x85\x68\xbd\xf6\x0c\xb6\xc0\x69\x0b\xfe\x5d\xc0\xcf\xd8\x1c\x45\x59\x66\xf6\xf9\xb0\x4a\x45\x27\x1d\x96\xe5\x5e\x48\x75\xfc\x53\x3e\x79\x3f\x56\x75\xb2\xee\x5b\x4d\x37\x2e\x7d\x9d\x50\x3b\x3c\x9d\xd2\x53\xed\x04\xef\x71\xc5\xfc\x84\x8c\xe5\x92\xfe\xbc\xd8\x72\x6b\xa9\x8c\xb5\x99\x37\x45\xbd\xcf\x1f\xbd\x7b\x89\x2c\x05\x92\xa8\x26\x61\xec\xc5\xb2\x99\x89\x33\x33\x76\xc1\xc5\x42\x5f\x96\xd6\x8c\xee\x5e\x46\x54\xc9\x82\xda\x72\x1e\x8b\x33\xf7\xf7\xba\x4d\xc7\xba\xb7\x0e\xcc\xb5\xc3\x69\x11\x78\xfc\xae\xd2\x62\x7a\x5e\xef\x98\xba\xda\x8f\x3c\x6a\x79\x4c\xec\xaa\xfb\xae\x61\x88\x0b\xe0\x68\xf4\x68\xa4\xfa\x4a\x4e\x90\x38\x17\x7d\x51\x94\x3c\x64\xcf\x0a\xe3\x1a\x16\xc5\xd2\xa3\xd5\x4f\x62\xf8\xb2\x12\xdc\xc7\x85\x0b\xe1\x3e\xac\x1d\xdf\x58\x72\xf1\xbb\x6b\x95\xb3\x60\xc8\x37\xcd\xac\xf7\x6f\x12\x96\x81\x46\x26\x25\xfb\xf2\x05\x23\x0e\x82\x7a\xd0\x62\x73\x8f\x79\x6c\xb7\xd6\xa0\x3e\x55\x91\xb3\x39\x9e\x9b\xfe\xca\xb6\x05\x93\x71\x29\x24\x77\xee\x60\x8e\xed\x15\x0a\x37\x50\x34\x4b\xdb\xf0\x72\x7e\xeb\xec\x79\x89\x84\x84\xf4\x01\xd6\x62\x71\x86\x20\x23\x7a\xf0\x7c\x88\x0e\xa1\x8c\x31\x51\x81\x2c\x04\x8b\x69\xde\xa7\x50\x5f\xf2\x13\x98\x43\x67\x4c\xc5\x0f\x3a\xc9\x71\x20\xca\xdb\x88\x51\x37\xcb\xb2\xea\x68\x55\x83\x52\x83\xe6\xa0\xa3\xc8\xaf\x28\xf1\x8d\xb8\xa1\x3f\x28\x58\x36\x1a\x22\x29\x21\x9f\x8f\x41\xba\xcf\xe1\xe4\xbf\x57\x7a\x07\xd5\x7c\xe3\x90\xc5\x0f\x8e\xec\x98\xd4\x0f\xd8\x79\xc6\xae\x17\x9a\xe8\xbb\x18\xb9\xef\x11\xf5\xb3\x33\xd8\x52\xc5\x6c\xf8\x14\x7e\xc5\x09\x35\x6d\xec\x5d\x67\x69\x0e\xcf\x37\xf3\x01\x64\x62\x12\x04\xfa\x95\x20\x53\xe8\xd6\x43\xbd\x50\xf7\xb6\x3d\xb3\x0d\x0d\xc2\xe3\x30\x4b\x02\x0c\xa1\xa6\x63\x7f\xa3\xe6\x84\xb5\x6c\xa0\x6f\xc0\x32\xde\x31\x32\x44\xa8\xba\xd1\x71\x94\x11\xcb\xfc\x72\x73\xdb\x75\x1b\x68\x3b\x17\xe5\x9b\xc5\xe2\x8e\x74\x2a\xf8\x1e\xb0\x2a\x69\x32\x3a\x23\x86\x76\x24\x92\x3f\x38\x08\x69\x0b\x16\x92\xd2\x0a\x9a\x59\x6f\xd3\xb2\x9a\xe3\x06\xd7\x53\xd9\x84\xf3\xc5\xa4\x32\xa6\x32\x48\xd8\x7a\xd4\x92\x82\xbf\x86\x65\x9e\xfb\x90\xfa\x37\x65\x3c\xf8\xa1\xf5\x89\x43\x4e\x8a\x46\xa4\xea\xa4\x70\x75\x2f\xd5\x3e\xed\x19\x5d\xdd\x9c\xf4\x0a\xb3\xf1\x8d\x96\x9e\xe5\x59\x84\x63\x6b\x10\x0a\x66\x90\x34\x38\x1d\xe7\x35\xd1\xd5\xf0\x14\x82\x66\x7e\xa3\xf9\x38\x67\x09\x25\xce\xac\x92\x2a\x24\xf6\x7b\x75\x7e\xc4\x8a\xb8\x02\x3b\xf6\x07\x65\x39\xbe\xb5\x6a\x4a\xa0\x78\xf8\x48\x38\xa8\x33\x62\xe5\xeb\x8d\xca\x63\xc9\x2b\xd5\x9e\x22\xfb\x75\x65\x44\x9f\x97\xd0\x62\xb6\x50\xd7\xf3\x35\x80\x17\x16\xbb\xda\x5f\x84\x95\xcb\x4e\xdd\x8e\xba\xa1\xd1\x63\xcd\xff\x88\x4d\xbd\x80\x5e\xd5\x3c\x11\xce\x2c\x4d\xbe\x02\x73\xe7\xd2\x1f\x6e\x69\xd2\xde\xd9\x01\xaf\xd3\xb5\xe5\xf8\xb2\x01\x66\x23\x3e\xca\xa6\x00\x19\xb0\x95\x26\x4b\xa5\xa1\x77\xe3\xb5\xb4\x4e\xcf\x08\xad\x61\x40\x5f\xe1\xfa\xd6\xd1\x13\x16\xb6\xf8\xb9\x93\xc7\x53\x99\x92\x00\x92\x01\xb7\xb2\x3e\x09\xa4\xe3\xdc\xc5\x73\xa1\xbe\xdc\xee\xb8\x89\xc3\xdf\x9d\xfd\xdd\xf4\xa3\x24\xf3\x59\xd9\x9b\xf7\x51\xea\x05\x4a\xcd\x94\x84\xfb\x2d\x85\xfb\x07\x70\x63\xd6\xd6\x12\x3b\xc1\x63\xbd\xbc\xe4\x14\x10\x8e\xc1\x32\x6f\x37\xf1\x17\xce\xf8\x8b\xcc\xf1\x78\x91\xad\xa8\xfb\x79\x10\xef\xed\x87\x6d\xc1\x22\xdb\x03\x35\x93\x56\x52\xf5\xfd\x26\xbb\x08\x4c\xc6\x6a\xef\xad\xc6\x90\x83\xcd\x1e\x1f\x82\x66\xa2\xf6\x73\x10\x73\x8a\x91\x19\x26\xce\x29\x42\xdd\xdd\x82\xe7\xd2\x18\x6d\xb8\xc0\x58\x17\x1d\xcc\xa4\x0a\x69\x54\xc0\x4a\x61\xb5\xca\x47\x74\x45\x1c\xe7\xee\x20\xfd\x24\xcf\x6d\x2d\xa5\x85\xc7\x87\xd1\xce\x87\x85\x1d\x19\x9b\x32\xbf\x61\x38\xca\x74\x5c\xd2\xb9\x28\x7e\x0a\xfc\x73\xb4\xd5\x7e\x2b\x0c\x04\xc8\xfd\xe6\x8b\x41\xa8\x8e\xb5\x09\x64\xfc\xef\x2a\x38\x71\x5b\x01\xa1\x8e\x39\xa4\x2e\x08\xf5\xfb\xbc\xb3\xda\x95\x6c\x33\xc1\xc9\x32\xc4\xa7\x48\xea\x09\x52\x93\x73\x55\xdd\x5a\xc1\x9d\x00\x14\x92\xdb\x26\x5c\xaf\x86\x7b\x85\x3c\x79\xdd\x39\xc5\x33\x73\x94\xef\xa2\x3b\x51\xb9\x29\x57\x5f\xde\xf7\x49\x2e\xd9\xd5\xbd\x0f\xbf\x76\x50\xcf\xbf\x62\x50\x70\x64\x77\x9a\xa6\x33\xb9\xf3\x96\xa1\xe4\x58\x4d\x79\x68\x2a\xac\x7c\xb1\x48\x52\x14\x2a\xac\x8a\x5a\x16\xab\x51\xcd\x64\x15\xbe\x05\x55\x6e\x55\xc3\x8b\x4e\xc1\xe0\x74\xed\xad\x6e\x1c\x58\x8d\x15\x8e\xe3\xab\xa3\x65\xa9\x3e\x46\xe8\x65\xb7\x62\x62\xeb\x7c\x2d\xdb\x2d\x82\xe1\x23\xc6\xce\x27\x50\xc0\xe0\xbd\xc2\x9a\xc1\x46\x5a\xf4\xcc\x1e\x79\xe3\x99\x70\x96\x6a\x45\xf9\xb5\x53\xd8\x6b\x26\x7b\xbe\x91\xfb\x6c\x76\x1b\x2b\x74\x71\x92\x60\x49\x93\xf2\x7a\xec\x27\xb2\x56\x96\xce\x7e\x1f\x92\xdb\xa9\xf4\x31\x3f\xec\x7d\x6d\x8e\xa5\x8f\xc6\x4f\x03\x3f\xf9\x24\x72\xee\xe9\xd4\x5e\x3b\xb3\xce\x2b\xbd\xb1\x17\xa8\xf2\xfa\x42\xbf\x19\xa9\xdb\x31\x6f\xd3\xd7\x0c\xf4\xc0\xc2\x8f\x1c\x70\xb9\xad\x0f\x2e\x9b\x78\x61\x7a\x3c\xa4\x21\x75\x6c\x7a\x4b\xb8\x52\x9c\x2b\xff\x35\x4e\x63\xea\xa1\x7f\x49\x01\x96\xf8\xff\x53\xf3\xdf\x00\x00\x00\xff\xff\x0b\x29\x65\xcd\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(436), modTime: time.Unix(1488636804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
