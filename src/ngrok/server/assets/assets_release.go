// Code generated by go-bindata.
// sources:
// assets/server/tls/.gitignore
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd2\x4b\x2e\x2a\xe1\xd2\xd2\xcb\x4e\xad\xe4\x02\x04\x00\x00\xff\xff\x7e\x20\x03\x51\x0c\x00\x00\x00"

func assetsServerTlsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsGitignore,
		"assets/server/tls/.gitignore",
	)
}

func assetsServerTlsGitignore() (*asset, error) {
	bytes, err := assetsServerTlsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/.gitignore", size: 12, mode: os.FileMode(436), modTime: time.Unix(1488892165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\xc9\xce\xb2\x48\x14\x86\xf7\x5c\x45\xef\x4d\x47\x54\x54\x58\xf4\xa2\x26\xa0\x64\xb2\x10\x41\xd8\x31\x4f\x22\x22\xca\x74\xf5\xed\xf7\x27\x3d\x24\x7f\x2d\x9f\x4a\x9e\x9c\x93\xf7\xbc\x7f\xfe\x3c\x48\x14\x6a\xfe\x81\x88\xed\x50\x99\x22\xe0\x90\x5f\x94\x33\x28\x45\x4f\x8c\x10\xf0\x47\x84\x18\x9e\xef\x05\x9b\xab\x65\x0d\x65\x07\x98\x30\xaf\xbb\xa2\x2e\x15\x69\xe4\x21\x60\xbd\x0c\x30\xb8\x1a\x36\x1d\x09\xf0\xb1\xcb\x18\xc6\xe0\xde\x72\xd1\xce\xe4\xf5\x47\x52\x44\x4d\x3c\xaa\x45\x6c\x1a\x4e\x3c\x1a\x0b\xd8\x19\x8e\xb1\x98\x0e\xdd\x7a\x3f\x6c\x01\x93\xe1\x10\xfe\x5f\x56\xfd\x27\xe2\xfe\x31\xfd\x5f\x94\xe7\xa4\x34\x00\xaf\xa0\x4b\xa7\x5c\x68\xb4\xc3\x8c\x7c\x27\xb8\x02\x20\x50\x88\x47\xf0\xf3\xaf\x81\x96\x7e\x19\xee\xb9\xf8\x58\x41\x75\xca\x2f\xc2\x41\x7a\xd4\x32\x79\xbe\x3a\x7b\xb6\x30\x82\xa0\x3e\x16\x9b\x8a\xde\x44\xdd\xd8\x9f\xbd\x70\x7d\x7f\x6a\x6a\xd9\x0c\x8b\x16\x75\xdd\x76\xf2\x5b\x31\x7d\x9a\x51\x74\xb6\x38\x4f\xa5\xc2\x10\xc4\x50\x8a\xd6\xeb\x51\x48\xc9\x07\xb3\xf9\xc1\xbc\xd5\x56\x50\x3e\xde\x3e\xda\xa3\x81\x6d\x32\x70\x69\x99\xfa\x12\x36\xfd\x03\x25\x45\xd7\x8e\xf7\xdc\xb0\x75\xf2\x4c\xd6\xd8\xe5\x36\xc6\xa5\xde\xbc\xf3\xce\x99\x94\x8f\x3d\xa8\x22\x0f\x10\x28\x2a\x23\x8f\x7d\xf6\x19\xeb\xc1\x88\xe0\x51\x0f\x9f\x32\x52\x9f\xfb\xb3\x06\xd3\x09\xad\x5c\x69\x39\xbb\xef\x75\xfd\xda\xf1\x5a\x44\x39\x08\x84\x77\x79\xba\xa7\x43\xb7\x44\xde\x6e\x72\x4f\x7a\xc2\xc2\x6b\x77\x0a\x15\xa3\xf1\x98\xeb\xb7\xde\xf1\x91\x5d\xe9\xf9\x76\x46\x78\xa6\x22\x9e\x57\x69\x85\x9f\xd0\xeb\x25\x58\xb5\xf3\xcb\xe7\x86\x8d\x1d\xd4\xee\x90\x03\xb7\xad\xde\xf7\x4b\x21\xb5\xab\x61\xa4\x62\x95\x9e\xc5\x22\xfb\x68\x75\x86\x8b\x69\x62\xa1\x2e\x6f\xa1\xfd\x46\xb9\xb1\xce\xa2\x95\xd5\xc4\x76\x98\xf4\xca\x31\x40\xdf\x15\xe6\x44\x2d\x8f\xb7\xa4\x48\xa4\x5a\xdf\x5e\x2e\xad\xd8\xd8\x20\x37\x20\x00\x64\xc4\xcc\x3f\x69\x6d\x40\x8b\x21\x36\x01\x23\x3a\x64\x00\x7f\x13\x80\x40\x35\xe1\x36\x70\x6f\xef\x59\x9f\xb9\x7c\x83\xac\xdb\x22\xa0\x48\xd2\x1a\xcb\xba\x25\x66\xba\x84\x5b\xcd\x41\x42\x90\xb3\x8e\xc6\xe5\x4d\x51\x08\x5d\xb6\x71\xef\x3d\xfa\xf7\x31\x7c\xdd\x6f\x61\xd1\x25\x11\x18\x9d\x97\xcd\x5b\xb6\xc4\x2d\xe5\x81\x3f\x3f\x86\xc4\xc8\x36\xf6\xc7\x1a\x5f\xec\xba\x7c\x0f\x30\xf8\xec\x23\xe1\xf0\xe9\x63\xb7\xe5\x45\xb6\xce\xc8\x74\xda\x7b\xcb\xdc\xca\xf1\x09\x0a\xe5\x38\x49\xbc\x69\x3b\x50\xf9\xb4\x0d\xb7\x40\xf5\xdc\x1f\x58\x21\xd3\x5a\x19\xe7\xb7\x15\x0b\xb7\x4b\x1d\xd0\xb4\x49\x83\xfd\xb0\xf2\x19\xa9\xc0\x2b\x14\x1a\xf1\xc5\x27\x7e\x2e\x1c\xac\x40\x06\x61\xe9\x36\x4b\xed\x8a\x03\xf9\xb0\x84\x5b\xc9\xd5\x61\x53\xd5\x52\x8d\x7a\x0d\x5e\x95\xe7\xc8\x37\xba\xbe\x1a\x70\xe6\x2c\xe1\xe2\x67\x76\x5e\x4e\xbc\x56\x44\x29\x2b\xc5\x88\x54\xa6\x9e\xaf\xe5\xc7\x3a\xee\x7b\xed\x1b\x7c\x36\xf4\x77\xee\xa8\xbc\xd4\xd4\xbe\xa5\x3c\x0c\x20\x56\xf8\xf8\xed\x67\xc9\xa2\xeb\x56\x7a\xb8\xcf\x42\xd2\x37\x49\x49\xde\x7d\x26\xf5\x5b\x7a\xd8\xf9\x82\x3f\x27\x31\x22\xf1\xe9\x31\x3c\x27\xc3\xbd\xaf\x26\x8d\xab\x12\xe7\x58\x6b\x87\x88\x1a\xfe\x5f\xdc\xaf\x82\x12\x13\xff\x5e\xda\xbf\x03\x00\x00\xff\xff\x9a\xcd\x21\x6a\xd1\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 977, mode: os.FileMode(436), modTime: time.Unix(1488893726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb5\xae\xec\x8a\x0e\x86\xfb\x3c\xc5\xee\xa3\xab\x30\x15\xb7\x08\x73\x32\x61\xe8\x02\x13\x98\xc0\x84\xe9\xe9\xcf\x3a\x6b\xb7\xc7\xad\x65\xe9\xd7\x27\xdb\xdf\xff\xfe\x2d\x4e\x94\x55\xeb\x8f\xeb\xb1\x7f\x5e\xae\x1a\xb2\xbe\xf8\x47\x17\x93\xdf\x0e\x60\xaa\xaa\x38\x39\x2a\xc7\xb2\x3a\xcf\x3a\x22\x4b\x29\x36\x7e\xba\x74\x22\xee\xf6\x91\x12\x9c\xab\x67\x64\x57\x7c\xea\xb3\x76\x34\x1b\x2f\x93\x5b\x82\xf8\xc7\xf6\x91\xe1\x20\x32\xaf\xc1\xa7\x05\xa0\xef\x81\x9c\xb7\x35\xd2\x5f\xca\xec\x47\xe8\xf3\xf4\xcd\x6d\x1b\x68\xcc\x56\x11\x04\xd1\xb6\xd2\x18\x35\x6c\x4e\xb0\x74\x6c\x3b\xb7\xf4\x7b\x04\x3a\x0b\x6c\xc5\xa7\x38\x8b\x1c\x09\x5a\xb9\x06\x9c\x63\x92\xcd\xa6\x96\x08\xa2\x77\xe9\x71\x75\x22\xa5\x2f\x4e\x56\x9e\xe8\x1d\xed\x2e\x5d\x7e\x41\x16\xcb\xd6\x6a\xf2\xa8\x8a\x2c\x1a\xab\x66\x3c\xf2\xf9\xbe\xd1\xd9\x75\x1a\xf2\xed\xdf\x75\x0c\xac\xce\xd1\x57\xc5\x83\xe4\x15\xa1\x33\x0c\x3f\xdc\xac\x63\x1b\x49\x9b\xc6\x0b\xb9\xa2\xc8\x46\x87\x9e\x87\x05\x72\xaf\xb7\x51\xf3\xd1\xfa\x4e\x8a\x74\x69\x27\x30\x84\x17\x90\xe7\xac\xe9\xf6\x05\xb0\xf4\x31\x7e\x4f\xd2\x09\x97\x97\x93\x90\xe6\x8c\x1a\x4c\x10\xa5\x52\x8e\xb3\x52\xa6\x52\x69\xf0\xad\xb2\xd7\x42\xf3\x2f\x15\xfb\x40\x6a\x4c\xb5\x93\x72\xe2\x45\x11\xc8\xed\x55\xd6\x41\xee\x7c\x01\xe1\x85\xa1\xd0\x67\x1a\xc5\x68\xcc\xb9\x1d\x75\xfa\xb2\x18\x5d\x7c\x47\xb0\x24\xae\x52\x9e\xe9\xba\xf9\xa5\x75\x8e\x2a\xb0\x0e\xcb\xb1\xdf\x1f\xd8\x92\x1e\x10\x1c\x2c\x93\x5c\xab\x3e\x5b\xf0\x01\xe0\xc0\x47\xdb\x2d\x2b\x5b\x78\x7d\x72\x7e\xbb\x28\xcb\xb8\x16\x37\xa3\x0e\xfe\x14\xce\x8c\xc1\x38\x26\x57\xd3\x67\x7e\xfd\x4c\xda\x84\x44\xd7\xcd\x20\xa0\xac\x93\x79\xba\xc1\x21\x1f\x37\x29\x81\xfb\x51\x76\x97\xf6\x88\x5e\x87\x6b\xf2\x78\x3e\x71\xfb\x6d\xef\x4e\xc1\x6e\xdc\xcb\x49\xad\xd0\x35\xdf\x44\xc7\x91\xa2\xbd\x30\x89\x3b\xf2\xe6\x78\x79\x8d\x9c\x64\x87\xcf\x94\x2f\xdd\x23\x73\x00\x63\x1e\xd1\x10\xcf\x0c\x54\x0c\xc7\x9a\x3b\xf0\xb1\xd1\xf5\x58\x35\x68\x50\x68\x63\xec\x1c\xcc\xbe\x9b\x32\x5c\xc7\x6b\xb3\x00\x25\x7a\x72\xc9\xdd\x99\xa4\x45\x45\x7d\x0e\xc7\xdb\x97\xd6\xec\xc0\x63\x59\x34\xaf\xca\xe2\xa5\x37\xb3\x7d\xd8\xa8\x66\x2b\x19\xbc\x4f\x24\x4e\xe2\xc2\x26\xea\x77\x15\xde\x91\xf4\x56\x38\xcd\xcd\x09\x6a\x9e\x27\x6a\x36\x4f\xf9\xe0\x43\xe9\xcb\x83\x1c\x12\x2a\x40\xf7\x6e\xe2\xa6\xdc\xde\x57\xe8\xa3\x64\x3b\x5f\x31\x84\x5e\xc8\x37\x76\x22\xbc\xdb\xb7\x6c\x9f\xc6\x75\xe4\x85\x28\x57\xbc\xa6\xf4\x3d\x99\x4c\xd5\xd3\x3a\x59\x28\xb2\xab\xdb\xc4\x6d\x5a\xc0\x80\x22\x7d\x42\xa8\x0c\xf8\x3a\x11\x59\x68\xb7\xe7\x54\xbc\x1a\xab\xb5\xe8\xba\xd3\xf0\x5d\xdc\xba\x2a\xf4\xe9\xbd\xc1\x86\xa0\x5b\xbb\xca\xff\x14\x7d\x65\x19\x4d\x45\xbf\xd5\x49\x64\xfd\x73\x2e\x81\x6f\x7a\x62\x91\xcd\xbb\xb7\x51\xa5\x16\xb2\xca\x47\x5b\xac\xb7\x8d\xe9\xeb\x85\x52\x63\x3e\x6c\x14\x6c\x1f\x53\x6b\x4f\x99\xdb\x07\x6d\x4b\xad\xb9\x8c\x66\x1f\x9e\xeb\x87\x0f\xf7\xb8\x0a\x97\x03\x07\x8b\xc6\xb7\x22\x81\x56\xdc\x2f\x97\xb8\x21\x94\xbf\xbc\x73\xcc\x65\xb7\x09\xe2\xdf\x18\x23\x15\xa0\xa8\xb0\xa7\x7a\xdb\x7c\x02\xf3\x9d\x6f\x14\xa1\xe5\x3c\x9e\xf9\x9b\x98\x8a\x37\x06\xd0\x87\x35\xcf\x92\xef\x70\x06\x24\x42\xb1\x35\xf8\x1a\x6f\x26\x4b\x2f\xff\x36\x6c\x2a\x2a\x2d\xec\xdc\x47\x83\x60\xbe\x63\x79\x64\x24\xb9\x0d\x22\xf9\xf1\xd5\x3b\xfe\x82\x7d\xe4\xe1\xe2\x89\x87\xc0\xb5\x12\x35\x18\x71\x41\x07\xa3\x0b\x85\x25\x11\xfc\x62\x45\xde\x27\x50\x3b\x5a\x2f\xb9\xa8\x9e\x0e\xba\x7b\x75\x2e\x5b\xb3\xbb\x28\xa4\x20\x77\x73\x1f\x1f\x65\x8d\xd5\xee\x8c\x87\x07\x1d\x2a\x00\x17\x92\xdd\x79\x63\x89\x4e\x97\x25\x2d\xbb\x1a\x0b\x19\x2d\x76\xea\xb8\xc0\x8f\x58\x43\x86\xe5\xe5\x7e\x16\x94\x5a\x7f\x23\x33\xc4\xe1\x60\x6d\x83\xc3\x37\x44\x31\xf0\xc4\x8c\x89\x11\x03\xcc\x09\x4b\x6d\xed\xe4\x17\x73\x4c\x45\xc6\xe2\x49\x42\xd1\x70\x3d\xe2\x2d\x32\xfa\x26\x14\x51\x52\x29\xd0\x0f\x2a\x5e\x4a\xfd\x08\x55\x7d\xa0\x19\xd8\xb1\x1f\xe2\x26\xf4\x4a\xa2\xe2\xfa\xe7\x1a\x51\xe5\x1c\xdf\xfe\x73\xb5\x0e\xbf\x64\x7a\x14\x21\xf6\xe4\xf4\xc1\x70\xb4\x6f\x9a\xb3\x0f\xec\xf8\x90\x73\x7d\xc5\x94\xf0\x0a\x90\x42\x10\x21\x59\x9e\x5e\xf7\xc0\x88\x9e\xa3\xe5\xaa\xdb\x6b\x23\xc0\x58\xf4\xb7\x4e\xe7\xa7\x93\x27\x31\xcb\xfa\x00\x72\x61\xff\x52\xff\x52\x26\xfb\x65\x63\xd9\x5e\xde\xab\xc4\x1a\x4d\xf5\x56\x83\x30\xb5\x70\xb8\x44\x16\xbf\x5e\xf3\x80\x2e\x28\xd2\x02\x98\x6b\x90\xba\x1c\xeb\x75\x9e\x82\xe8\x31\xd7\xb9\x12\xef\x8d\x87\xec\x77\xf6\x85\x92\x70\xc1\x89\xe3\xf8\xe9\x5f\x81\xe5\xc4\xcd\x4c\x35\x4b\x2a\x05\xd6\x30\x88\x3c\x33\x4d\xf5\xd3\x7d\x40\x0f\x10\x3e\x84\x6e\x4a\x3a\xef\xdc\x7e\xae\x41\x43\xe2\xad\x2a\x3e\x80\xbb\xbd\x34\xf5\x8c\x72\x5c\xab\x61\xb4\x13\x5c\xbb\x6c\xf6\x18\xef\x4a\xba\xcf\xe2\x9e\x5f\x7f\x5d\x3d\xe1\xb3\x56\x4c\x5a\x0b\xc8\x56\x2c\x56\xa9\xbf\xab\x3c\xc3\x09\xc9\x31\x24\x35\xb2\x4f\x38\xa7\x38\x63\xa6\xc1\x9a\x7c\x33\x33\xbf\xfd\x1d\xff\xca\xee\xce\x6c\x29\x6d\x66\x23\x65\xa9\xe7\x76\xb2\xec\xcf\xd3\xbb\x01\xee\xec\x54\x36\xca\xd4\x1c\x59\x10\x34\x0b\x08\xa7\x31\x06\x70\x84\xbe\x82\x41\xf5\xf8\x8c\x82\x8f\xa6\xa1\x95\x03\xdf\x2e\x54\x2c\x64\x37\x16\x60\x82\x54\x96\x6f\xc9\x2d\xc1\x33\x44\x14\xe8\x00\x0e\xeb\x06\x98\xe3\x9e\x4b\x49\x42\xc7\xa1\x71\xf4\xae\x41\x30\xd4\x74\xb9\x28\x7d\x95\x96\x98\xd5\x82\x15\x26\x51\x12\xce\x73\x46\xdb\x2a\x3a\x1d\x77\xe9\x75\xea\xfe\x0f\xfc\x6a\x45\xb4\x84\xff\xd6\xcd\x3f\x01\x00\x00\xff\xff\xcd\x1f\x09\x42\x8f\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1679, mode: os.FileMode(436), modTime: time.Unix(1488893726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/.gitignore": assetsServerTlsGitignore,
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				".gitignore": &bintree{assetsServerTlsGitignore, map[string]*bintree{}},
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

